REPORTE DE TRABAJO PROYECTO Pjulia

Versión de Django utilizada 2.0.7
super user django es:
developers
User1987

Base de datos:
Mysql
Nombre: corindb
usuario: devuser
utf8
Pass: User1987

Superadmin para django
username: corinmanager
pwd:p1234.#1


** Se utilizó en el modelos los campos booleanos con NullBooleanField en lugar de BooleanField, ya que NullBoolean es el utilizado en la versión Django 2.1 tenerlo en cuenta por si el hosting no soporta la última versión de Django y genera error en este campo

Las pruebas las habíamos hecho en Django 2.0 y MochaHost sólo soporta la versión 1.5, por ese motivo reconfiguramos el ambiente para adaptarnos a las particularidades del hosting.


** Ojo cuando se hace una consulta con get si no existe el valor django genera una excepcion

Deployment keys:
https://www.youtube.com/watch?v=40eaIU1rByg

Configuracion de la base de datos 
Disponible en el archivo settings.py


*** Manejo de librerias necesarias
Considere que en el archivo requirements.txt
(Mas info disponible en https://rukbottoland.com/blog/como-instalar-paquetes-python-con-requirementstxt/)
Comando pip install -r requirements.txt

# Para instalar una versión específica
package==version

# Para instalar una versión igual o superior
package>=version

# Para instalar la versión más reciente
package

# Migraciones en python tips
Para revertir todas las migraciones por una aplicación para inicial o de puesta, puede ejecutar:
./manage.py migrate my_app zero

# Ejecutar una migracion en particular
manage.py migrate my_app 0010_previous_migration 
# Ejemplo manage.py migrate encuestador 0002_seed


# Mostrar todas las migraciones y su estado
manage.py showmigrations

# Darle nombre a las migraciones
If you want to give the migration(s) a meaningful name instead of a generated one, you can use the makemigrations --name option:

# Unificar migraciones ( para tener algo mas listo para producción )
Squashing migrations¶
manage.py squashmigrations appName migrationNumber
manage.py squashmigrations encuestador 0004

######Modelos en Django
Cada vez que se hace un cambio en el modelo se tiene que hacer una migración con makemigrations y luego ejecutar la migración



get_absolute_url()
Esto le indica a Django cómo calcular la URL de un objeto. Django usa esto en su interfaz de administración y en cualquier tiempo que necesita para encontrar una dirección URL de un objeto.
Cualquier objeto que tenga una URL que identifica de forma exclusiva debe definir este método.



Pasos para migrar la aplicacion
Crear la base de datos
Agregar el usuario a la base de datos
Dar permisos de "localhost" al usuario de la base de datos
Elaborar migraciones ( en caso de que existan otras en la base de datos)
Instalar dependencias proyecto python:  pip install -r requirements.txt
Migrar la base de datos --> python manage.py migrate
Correr el servidor --> 
(Solo la primera vez crear usuario adminstrativo) python manage.py createsuperuser






#############VUE.js ################
Instale paquete para manejo de numeros en la visualización
$ npm install vue-numeric --save
https://www.npmjs.com/package/vue-numeric

Instalé paquete para controlar la validación de los formularios
npm install vee-validate --save
https://m.dotdev.co/form-validation-using-vue-js-2-35abd6b18c5d
https://www.npmjs.com/package/vee-validate

Para el despliegue de vue tuve que agrgar un archvio en la raiz llamado vue.config.js en este archivo puse un codigo en el que si la llamada era en rpoduction entonces se usara /corin/ sino se usara /

Instale paquete para la edición de los textos de manera más interactiva ese paquete se llama tiptap
(Al fin no funciono)
npm install tiptap
npm install --save tiptap-extensions

(probe este otro vue-trix)
https://vuejsexamples.com/simple-and-lightweight-trix-rich-text-editor-component-for-vue-js/


#Instalé paquete para la descarga de datos en excel 
https://vuejsexamples.com/json-to-excel-for-vue-2/
vue-json-excel
npm install vue-json-excel --save

# Instale vuex para el manejo de estados
npm install vuex --save

vueaxios para manejar axios integrado con vue
https://www.npmjs.com/package/vue-axios
npm install --save axios vue-axios

#Instalé Yarn para instalr un paque para documentar los componentes que se llama vuese [ no funciono]


# Manejar permisos dentro de la APP
CASL 
CASL allows you to define a set of rules which restrict what resources a given user is allowed to access.
ASL (pronounced /ˈkæsəl/, like castle) is an isomorphic authorization JavaScript library which restricts what resources a given user is allowed to access. All permissions are defined in a single location (the Ability class) and not duplicated across UI components, API services, and database queries.
npm install @casl/vue @casl/ability --save

-- Con la lista desplegable se puede poner el siguiente atributo cuando el campo de texto de la lista desplegable no se llame text entonces se pone 
<b-form-select name="companies" id="companies" v-model="user.company" :options="companies" text-field="name"/>


-- VUEX
Maneja el estado de la aplicación tiene un arreglo state en el que se meten las varibles que se quieren controlar  y en mutation se ponen los métodos que controlan las variables definidas en el state. 
Se tiene que haber instalado vuex para poderlo usar. Estos metodo se llaman con la palabra clave commit
ejemplo store.commit ('nombre de la propiedad')

Vuex provides a mechanism to "inject" the store into all child components from the root component with the store option (enabled by Vue.use(Vuex)):

Vue authentication and route handling
VUE https://scotch.io/tutorials/vue-authentication-and-route-handling-using-vue-router
Vuex y autenticacion : https://scotch.io/tutorials/handling-authentication-in-vue-using-vuex

**  Flex-box properties
justify-content: center, flex-start, flex-end, center, space-around( equal amount of space) space-between space-evenly

// put an item at the left side.  Y todos los elementos que tiene relacionados también lso pone abajo.
margin-left:auto; 
margin-right: auto;


//Make the items responsive according to the size of the container
We can as many items as we want and make them responsive
flex: 1; This is a short-hand of three properties flex-grow flex -shrink and flex-basis

If I want to have a container twice bigger than another then we can use 
flex: 2
.container > div  // class + item

// Align vertical
align-items: center, stretch, flex-end

// Vertical high responsive
Se pone en el body el height del 100 % y luego con eso y ase puede poner en el contenedor el height del resto del porcentaje

//Alinear un solo item
align-self: flex-start

// Permite que se agrupen los paneles y que se muvan como cuando en el grid de bootstrap no caben el número de columnas. 
flex-wrap: wrap

order: permite cambiar laubicacónde los items en el domdel mismo content. Numeros menoreds a 0 se ubican primero y numeros mayors a cero se ubican de ultimos


####################### django commands  ##############
Comandos
Migrar la base de datos python manage.py migrate
Correr servidor : python manage.py runserver
Elaborar nuevas migraciones: manage.py makemigrations

Crear super user
manage.py createsuperuser


#Superusuario
admin
pwd: poiU1234

pycharm: alt + enter:  arrega los imports 

############## REST FRAMEWORK #############################
http://www.django-rest-framework.org/tutorial/2-requests-and-responses/

Los serializers son importantes para el rest framework
Web API is to provide a way of serializing and deserializing the snippet instances into representations such as json. REST framework includes both Serializer classes, and ModelSerializer classes.
ModelSerializer classes don't do anything particularly magical, they are simply a shortcut for creating serializer classes, An automatically determined set of fields and provides a Simple default implementations for the create() and update() methods.

# Request 
REST framework introduces a Request object that extends the regular HttpRequest, and provides more flexible request parsing. The core functionality of the Request object is the request.data attribute, which is similar to request.POST, but more useful for working with Web APIs.

# Response
REST framework also introduces a Response object, which is a type of TemplateResponse that takes unrendered content and uses content negotiation to determine the correct content type to return to the client

Para las relaciones importa
Que en el modelo las relaciones tengan un nombre
Que exista el serializador de los objetos que se queiren dibjar
Que si se obtiene el serializador usando "cadena" esta cadena corresponda al nombre de la relacion en el modelo y luego el atributo se llame igual cuando se ponen los campos
En las vistas se pueden filtrar los datos que seran serializados


# Para hacer que se puedan hacer peticiones rest a los servicos hay que instalar este paquete
django-cors-headers

# Para incluir todos los campos en el serializador de Django se debe poner
fields = '__all__'
###############################################################################

%%========================Ejemplo a consultar ==================================%

https://vue-django-crud.herokuapp.com
https://medium.com/quick-code/crud-app-using-vue-js-and-django-516edf4e4217

# Heroku 
https://realpython.com/migrating-your-django-project-to-heroku/
Mas acualizado : https://devcenter.heroku.com/articles/deploying-python
Conceptos generales: https://devcenter.heroku.com/articles/django-app-configuration

1) Heroku web applications require a Procfile. En ese archivo se pone esta linea
web: gunicorn <myproject>.wsgi
Gunicorn, the production web server that we recommend for Django applications.
Agregar en requirements.txt los requerimientos de posgress
Crear archivo Procfile en el root del proyecto. Alli hay que poner la linea para llamar el modulo wsgi que es el que realmente ejecuta los archivos. Esa lína depende del sistema operativo y estaes la intruccion para linux
web: gunicorn CORIN.wsgi --log-file - . Ojo que CORIN.wsgi es CORIN pq asi se llama el poryecto y wsgi pq es el archivo que se queire cargar luego python automáticamente busca el wsgi que corresponda

El nombre del archivo wsgi tiene que coincidir en general con lo que este definido  en el parametro WSGI_APPLICATION del achivo settings.py

En el settings .py también hay que cambiar la parte de la configuración de la base de datos para que quede solo el driver, no se necesita usuario y contraseña pues heroku controla esto automáticamente. 

DATABASES = {
    'default': {
         # Heroku controls the username and password
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
    }
}

2) En el settings .py poner el debug en false

3)  Instalar la dependencia django-heroku

4)  Agregar en el settings.py la siguiente informacion para activar el paquete de heroku
import django_heroku

# Activate Django-Heroku.
django_heroku.settings(locals())




También agregué esto en el archivo de settings
import dj_database_url

DATABASES = { 'default' : dj_database_url.config()}

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# try to load local_settings.py if it exists
try:
  from .local_settings import *
except Exception as e:
  pass





# Instale las siguientes dependencia spara que funcionara
django-heroku


# Static files, los archivos estaticos se tiene que ubicar diferente en producción que en desarrollo pq en 
https://devcenter.heroku.com/articles/django-assets
desarrollo django los configura y los gestiona, pero en producción los permisos sobre los servidores no son los mismos. 

whitenoise es la libreria para desplegar archivos estaticos
With a couple of lines of config WhiteNoise allows your web app to serve its own static files, making it a self-contained unit that can be deployed anywhere without relying on nginx, Amazon S3 or any other external service

En settings.py se debe agregar la instruccion como middleware 'whitenoise.middleware.WhiteNoiseMiddleware',

When a Django application is deployed to Heroku, $ python manage.py collectstatic --noinput is run automatically during the build. A build will fail if the collectstatic step is not successful.

Se debe estar seguro que el settings.py tiene todo lo siguiente:
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)


#Comandos 
heroku run python manage.py migrate
 Ver logs de heroku  heroku logs --tail

 Susperndiendo procesos en heroku
 heroku ps:stop run.3372

#Paquete para hacer request http desde la consola usando django
pip install httpie
Ejemplo de uso: http POST http://localhost:8000/api-token-auth/ username="admin" password="poiU1234"

#Consultas en el manager de python
EN el serializador objetos que solo retornen un elemento deben tener una coma
Note the comma. A tuple with only one object requires a trailing comma to distinguish it from a parenthesized object.
 class Meta:
        model = Company
        fields = ('company_contact_name',)


# Verificar problemas de seguridad para el despligue
python manage.py check --deploy

# Arreglar problema de longitud de campos en mysql
mysql> ALTER TABLE table_columns MODIFY type varchar(255);

# Con mariadb
https://websiteforstudents.com/fix-mariadb-plugin-unix_socket-is-not-loaded-error-on-ubuntu-17-04-17-10/

#Configuracion proyecto en el server
Icono nuevo superior izquierdo.
Nombre: ttulo 
Host: ip del server que lo va a desplegar
A mano de derecha:
conexión-> autenticación- >a mano izquierda y escojo llave publica
Click en configurar y busco el archivo y lo selecciono. 

Nombre de usuario: se escribe.
Method. Se pone la llave publica y ya con eso queda conectado. 
ME queda acceso al servidor. 

# Autenticación api rest
Poner la configuración x defecto en el settings.py
Incluir 'rest_framework.authtoken' en las installed apps
Crear un usuario admin ( para probar)
Correr la migración

# Despliegue de la aplicació
Pasar quien es el usuario de autenticación, y la parte de rest a la parte de autentiation del local_settings.py



# Despliegue con una rama diferente del master en heroku
git push -f heroku herokuVersion:master


900737228-0
DIRECCIÓN CALLE 128A NRO 53 40


# Detalle des desarrollo
Front-end
# Uso de vee-validate
Los campos que en la renderización tiene v-show = false si tienen validacion igual trataran de ser validados aunque esten ocultos y eso hará que el formulario no se envie. En ese caso el v-validate debe ser controlado por una expresión para que solo se validen como 'required' cuando sean visibles. Ejemplos de esto se encuentran en UserManager con el campo password en modo edición y con las listas de usuario y contraseña que no se piden siempre. 

Revisar que estoy enviando en el update pq es posible que trate de actualizar el password con null y esa no es la idea.

#Update method Serializer
Si se sobreescribe el update se tiene ue enviar desde la vista actual la instancia actual, y los datos del formulario para que no se cree un nuevo objeto


# arreglar el config_survey pq esta tomando siempre como customized instrument 1 y eso no esta bn

#limpiar los mensajes cuando hay errores  ok

# personalizar encuesta , estaba usando un componente mas sofisticado pero como 
# no estaba funcionando los cambie por text areas

Descargar respuestas todas --> ok

#Campo requerido profile

#repetido el mensaje de error 

# errores en el modal
# que cuando hay errores en el login no se quitan y por eso no deja seguir


#Sobre django
Aprendi que el metodo validate solo se llama después de que los datos que se esperan sean recibidos

Aprendi que para llamar el save si no se quiere que se cree un nuevo objeto al instanciar el serializador se debe enviar por parametro la instancia actual

Aprendi que si algún campo puede ser null cuando se inserta en la base de datos en la definición de los campos en el serializador se tiene que poner el parametro allow_null=True.
Ahora si en la actualización no se tiene que mandar algún campo en la definición de los atributos en el serializador se tiene que poner el atributo
required=False. Ejemplos de esto en el UserSerializer
